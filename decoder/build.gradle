import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()

    }

    dependencies {
        classpath 'org.codehaus.griffon:gradle-griffon-plugin:2.16.0'
        classpath 'gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin:0.15.0'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.39.0'
        classpath 'gradle.plugin.net.nemerosa:versioning:2.15.1'
    }
}

apply plugin: 'groovy'
apply plugin: 'org.codehaus.griffon.griffon'
apply plugin: 'net.nemerosa.versioning'

Date buildTimeAndDate = new Date()
ext {
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
    macosx = System.getProperty('os.name').contains('Mac OS')
}

griffon {
    disableDependencyResolution = false
    includeGroovyDependencies = true
    version = '2.16.0'
    toolkit = 'swing'
    /*applicationProperties = [
        'build_date'    : buildDate,
        'build_time'    : buildTime,
        'build_revision': versioning.info.commit
    ]*/
}

task copyHelp(type: Copy) {
    from( 'doc/build/' ) {
        include('**/*.html')
        include('**/*.pdf')
    }
    into 'build/resources'
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

processResources {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

mainClassName = 'com.spw.rr.Launcher'

apply from: 'gradle/publishing.gradle'
apply from: 'gradle/code-quality.gradle'
apply plugin: 'com.github.ben-manes.versions'


configurations.all {
    resolutionStrategy {
        force 'org.slf4j:slf4j-api:1.7.32'
        force 'org.apache.logging.log4j:log4j-core:2.22.1'
        force 'org.apache.logging.log4j:log4j-slf4j-impl:2.22.1'
        force 'org.codehaus.griffon:griffon-swing-groovy:2.16.0'
        force 'org.codehaus.griffon:griffon-groovy-compile:2.16.0'
        force 'org.codehaus.griffon.plugins:griffon-mybatis-core:2.2.1-SNAPSHOT'
        force 'org.mybatis:mybatis:3.5.6'
    }
}


dependencies {
    api "org.codehaus.griffon:griffon-guice:${griffon.version.get()}"
    // https://mvnrepository.com/artifact/javax.annotation/javax.annotation-api
    // https://mvnrepository.com/artifact/javax.annotation/javax.annotation-api
    implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'

    implementation 'org.codehaus.griffon.plugins:griffon-miglayout-swing-groovy:2.0.0'
    implementation 'org.codehaus.griffon.plugins:griffon-monitor-core:2.1.0'
    implementation 'org.codehaus.griffon.plugins:griffon-datasource-core:2.1.0'
    implementation 'org.codehaus.griffon.plugins:griffon-datasource-groovy-compile:2.1.0'
    implementation 'org.codehaus.griffon.plugins:griffon-mybatis-core:2.2.1-SNAPSHOT'
    implementation 'org.codehaus.griffon.plugins:griffon-mybatis-groovy-compile:2.1.0'
    // https://mvnrepository.com/artifact/com.glazedlists/glazedlists
    implementation group: 'com.glazedlists', name: 'glazedlists', version: '1.11.0'

    //implementation 'org.codehaus.griffon.plugins:griffon-glazedlists-swing:1.3.1'
    //implementation 'org.codehaus.griffon.plugins:griffon-glazedlists-swing-groovy:1.3.1'
    // https://mvnrepository.com/artifact/com.h2database/h2
    implementation group: 'com.h2database', name: 'h2', version: '1.4.199'

    // https://mvnrepository.com/artifact/org.mybatis/mybatis
    implementation group: 'org.mybatis', name: 'mybatis', version: '3.5.6'

    //runtimeOnly "org.slf4j:slf4j-simple:${slf4jVersion}"
// https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation 'org.slf4j:slf4j-api:1.7.32'
// https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12
    implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.32'

// https://mvnrepository.com/artifact/org.perf4j/perf4j
    implementation 'org.perf4j:perf4j:0.9.16'

    testImplementation "org.codehaus.griffon:griffon-fest-test:${griffon.version.get()}"
    testImplementation "org.spockframework:spock-core:${spockVersion}"
    testImplementation('org.awaitility:awaitility-groovy:3.1.0') {
        exclude group: 'org.codehaus.groovy', module: 'groovy'
    }
    testImplementation "org.codehaus.groovy:groovy:${groovyVersion}"
    //runtime files('/libs/db2jcc4.jar')
    implementation "ibm.db2:db2Driver:1.4.199"
}

startScripts {
    doLast {
        if (!macosx) unixScript.text = unixScript.text.replaceAll('"(-Xdock:(name|icon)=)([^"]*?)(")', ' ')
        windowsScript.text = windowsScript.text.replaceAll('"(-Xdock:(name|icon)=)([^"]*?)(")', ' ')
    }
}

if (hasProperty('debugRun') && ((project.debugRun as boolean))) {
    run {
        jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005'
    }
}